/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * BFF Service
 * Backend For Frontend service aggregating microservices
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ErrorResponse,
  GetMeAuthMeGet200,
  HTTPValidationError,
  LoginRequest,
  LoginResponse,
  RefreshTokenRequest,
  RefreshTokenResponse,
  SignupRequest,
  SignupResponse,
} from ".././models";

import { customInstance } from "../../client";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Authenticate user with email and password.

Access rules:
- Web users (web_users group) can only login with client_type='web'
- Seller users (seller_users group) can only login with client_type='mobile'
- Client users (client_users group) can only login with client_type='mobile'

Returns JWT tokens that can be used for subsequent API requests.
Users are automatically assigned to groups based on their user_type attribute.

Args:
    request: Login credentials (email, password, client_type)

Returns:
    LoginResponse with access_token, id_token, and refresh_token

Raises:
    HTTPException: 400 if client_type is invalid
    HTTPException: 403 if user group doesn't match client_type
 * @summary Login
 */
export const loginAuthLoginPost = (
  loginRequest: LoginRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<LoginResponse>(
    {
      url: `/auth/login`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: loginRequest,
      signal,
    },
    options,
  );
};

export const getLoginAuthLoginPostMutationOptions = <
  TError = ErrorResponse | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof loginAuthLoginPost>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof loginAuthLoginPost>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationKey = ["loginAuthLoginPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof loginAuthLoginPost>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return loginAuthLoginPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginAuthLoginPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof loginAuthLoginPost>>
>;
export type LoginAuthLoginPostMutationBody = LoginRequest;
export type LoginAuthLoginPostMutationError =
  | ErrorResponse
  | HTTPValidationError;

/**
 * @summary Login
 */
export const useLoginAuthLoginPost = <
  TError = ErrorResponse | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof loginAuthLoginPost>>,
      TError,
      { data: LoginRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof loginAuthLoginPost>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getLoginAuthLoginPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Refresh access token using refresh token.

Args:
    request: Refresh token request
    cognito: Cognito service instance

Returns:
    RefreshTokenResponse with new access_token and id_token
 * @summary Refresh
 */
export const refreshAuthRefreshPost = (
  refreshTokenRequest: RefreshTokenRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<RefreshTokenResponse>(
    {
      url: `/auth/refresh`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: refreshTokenRequest,
      signal,
    },
    options,
  );
};

export const getRefreshAuthRefreshPostMutationOptions = <
  TError = ErrorResponse | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof refreshAuthRefreshPost>>,
    TError,
    { data: RefreshTokenRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof refreshAuthRefreshPost>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationKey = ["refreshAuthRefreshPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof refreshAuthRefreshPost>>,
    { data: RefreshTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return refreshAuthRefreshPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type RefreshAuthRefreshPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof refreshAuthRefreshPost>>
>;
export type RefreshAuthRefreshPostMutationBody = RefreshTokenRequest;
export type RefreshAuthRefreshPostMutationError =
  | ErrorResponse
  | HTTPValidationError;

/**
 * @summary Refresh
 */
export const useRefreshAuthRefreshPost = <
  TError = ErrorResponse | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof refreshAuthRefreshPost>>,
      TError,
      { data: RefreshTokenRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof refreshAuthRefreshPost>>,
  TError,
  { data: RefreshTokenRequest },
  TContext
> => {
  const mutationOptions = getRefreshAuthRefreshPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Register a new user.

Only 'client' user type is allowed to sign up.
Web and seller users must be created by administrators.

This endpoint:
1. Creates a Cognito user account
2. Creates a client record in the client microservice
3. Links them via cognito_user_id

The user will receive a verification email and must verify their email
before they can login.

Args:
    request: Signup data (email, password, user_type, and all client fields)
    cognito: Cognito service instance

Returns:
    SignupResponse with user_id, client_id, and confirmation message
 * @summary Signup
 */
export const signupAuthSignupPost = (
  signupRequest: SignupRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<SignupResponse>(
    {
      url: `/auth/signup`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: signupRequest,
      signal,
    },
    options,
  );
};

export const getSignupAuthSignupPostMutationOptions = <
  TError = ErrorResponse | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof signupAuthSignupPost>>,
    TError,
    { data: SignupRequest },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof signupAuthSignupPost>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const mutationKey = ["signupAuthSignupPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof signupAuthSignupPost>>,
    { data: SignupRequest }
  > = (props) => {
    const { data } = props ?? {};

    return signupAuthSignupPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type SignupAuthSignupPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof signupAuthSignupPost>>
>;
export type SignupAuthSignupPostMutationBody = SignupRequest;
export type SignupAuthSignupPostMutationError =
  | ErrorResponse
  | HTTPValidationError;

/**
 * @summary Signup
 */
export const useSignupAuthSignupPost = <
  TError = ErrorResponse | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof signupAuthSignupPost>>,
      TError,
      { data: SignupRequest },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof signupAuthSignupPost>>,
  TError,
  { data: SignupRequest },
  TContext
> => {
  const mutationOptions = getSignupAuthSignupPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Get current authenticated user information.

Requires valid JWT token in Authorization header.

Args:
    user: Current user from JWT token

Returns:
    User claims from JWT token
 * @summary Get Me
 */
export const getMeAuthMeGet = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<GetMeAuthMeGet200>(
    { url: `/auth/me`, method: "GET", signal },
    options,
  );
};

export const getGetMeAuthMeGetQueryKey = () => {
  return [`/auth/me`] as const;
};

export const getGetMeAuthMeGetQueryOptions = <
  TData = Awaited<ReturnType<typeof getMeAuthMeGet>>,
  TError = ErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getMeAuthMeGet>>, TError, TData>
  >;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetMeAuthMeGetQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getMeAuthMeGet>>> = ({
    signal,
  }) => getMeAuthMeGet(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getMeAuthMeGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetMeAuthMeGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof getMeAuthMeGet>>
>;
export type GetMeAuthMeGetQueryError = ErrorResponse;

export function useGetMeAuthMeGet<
  TData = Awaited<ReturnType<typeof getMeAuthMeGet>>,
  TError = ErrorResponse,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeAuthMeGet>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeAuthMeGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMeAuthMeGet<
  TData = Awaited<ReturnType<typeof getMeAuthMeGet>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeAuthMeGet>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMeAuthMeGet>>,
          TError,
          Awaited<ReturnType<typeof getMeAuthMeGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetMeAuthMeGet<
  TData = Awaited<ReturnType<typeof getMeAuthMeGet>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeAuthMeGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Me
 */

export function useGetMeAuthMeGet<
  TData = Awaited<ReturnType<typeof getMeAuthMeGet>>,
  TError = ErrorResponse,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getMeAuthMeGet>>, TError, TData>
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetMeAuthMeGetQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
