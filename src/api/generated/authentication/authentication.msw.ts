/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * BFF Service
 * Backend For Frontend service aggregating microservices
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type {
  GetMeAuthMeGet200,
  LoginResponse,
  RefreshTokenResponse,
  SignupResponse,
} from ".././models";

export const getLoginAuthLoginPostResponseMock = (
  overrideResponse: Partial<LoginResponse> = {},
): LoginResponse => ({
  access_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  refresh_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  token_type: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  expires_in: faker.number.int({ min: undefined, max: undefined }),
  user_groups: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => faker.string.alpha({ length: { min: 10, max: 20 } })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getRefreshAuthRefreshPostResponseMock = (
  overrideResponse: Partial<RefreshTokenResponse> = {},
): RefreshTokenResponse => ({
  access_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  id_token: faker.string.alpha({ length: { min: 10, max: 20 } }),
  token_type: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  expires_in: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getSignupAuthSignupPostResponseMock = (
  overrideResponse: Partial<SignupResponse> = {},
): SignupResponse => ({
  user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  email: faker.string.alpha({ length: { min: 10, max: 20 } }),
  cliente_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
  nombre_institucion: faker.string.alpha({ length: { min: 10, max: 20 } }),
  message: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetMeAuthMeGetResponseMock = (): GetMeAuthMeGet200 => ({});

export const getLoginAuthLoginPostMockHandler = (
  overrideResponse?:
    | LoginResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<LoginResponse> | LoginResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/login",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getLoginAuthLoginPostResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getRefreshAuthRefreshPostMockHandler = (
  overrideResponse?:
    | RefreshTokenResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<RefreshTokenResponse> | RefreshTokenResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/refresh",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getRefreshAuthRefreshPostResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getSignupAuthSignupPostMockHandler = (
  overrideResponse?:
    | SignupResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<SignupResponse> | SignupResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/auth/signup",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getSignupAuthSignupPostResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getGetMeAuthMeGetMockHandler = (
  overrideResponse?:
    | GetMeAuthMeGet200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetMeAuthMeGet200> | GetMeAuthMeGet200),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/auth/me",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getGetMeAuthMeGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getAuthenticationMock = () => [
  getLoginAuthLoginPostMockHandler(),
  getRefreshAuthRefreshPostMockHandler(),
  getSignupAuthSignupPostMockHandler(),
  getGetMeAuthMeGetMockHandler(),
];
