/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * BFF Service
 * Backend For Frontend service aggregating microservices
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClientCreateInput,
  ClientListResponse,
  HTTPValidationError,
  ListClientsBffSellersAppClientsGetParams,
  OrderCreateResponse,
  SellersAppSchemasOrderSchemasOrderCreateInput,
} from ".././models";

import { customInstance } from "../../client";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new order via sellers app.

This endpoint:
1. Accepts customer_id, seller_id, items, and optional visit_id
2. Forwards request to Order Service with metodo_creacion='app_vendedor'
3. seller_id is REQUIRED (seller creating the order)
4. visit_id is OPTIONAL (can be linked to a visit or not)

Args:
    order_input: Order creation input
    order_port: Order port for service communication

Returns:
    OrderCreateResponse with order ID and message

Raises:
    HTTPException: If order creation fails
 * @summary Create Order
 */
export const createOrderBffSellersAppOrdersPost = (
  sellersAppSchemasOrderSchemasOrderCreateInput: SellersAppSchemasOrderSchemasOrderCreateInput,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderCreateResponse>(
    {
      url: `/bff/sellers-app/orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: sellersAppSchemasOrderSchemasOrderCreateInput,
      signal,
    },
    options,
  );
};

export const getCreateOrderBffSellersAppOrdersPostMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrderBffSellersAppOrdersPost>>,
    TError,
    { data: SellersAppSchemasOrderSchemasOrderCreateInput },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrderBffSellersAppOrdersPost>>,
  TError,
  { data: SellersAppSchemasOrderSchemasOrderCreateInput },
  TContext
> => {
  const mutationKey = ["createOrderBffSellersAppOrdersPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrderBffSellersAppOrdersPost>>,
    { data: SellersAppSchemasOrderSchemasOrderCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return createOrderBffSellersAppOrdersPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateOrderBffSellersAppOrdersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrderBffSellersAppOrdersPost>>
>;
export type CreateOrderBffSellersAppOrdersPostMutationBody =
  SellersAppSchemasOrderSchemasOrderCreateInput;
export type CreateOrderBffSellersAppOrdersPostMutationError =
  void | HTTPValidationError;

/**
 * @summary Create Order
 */
export const useCreateOrderBffSellersAppOrdersPost = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createOrderBffSellersAppOrdersPost>>,
      TError,
      { data: SellersAppSchemasOrderSchemasOrderCreateInput },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createOrderBffSellersAppOrdersPost>>,
  TError,
  { data: SellersAppSchemasOrderSchemasOrderCreateInput },
  TContext
> => {
  const mutationOptions =
    getCreateOrderBffSellersAppOrdersPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Create a new client via sellers app.

Requires mobile seller authentication (seller_users group).

Args:
    client_input: Client creation input
    client_port: Client port for service communication
    user: Authenticated seller user

Returns:
    Client creation response with ID and message

Raises:
    HTTPException: If client creation fails
 * @summary Create Client
 */
export const createClientBffSellersAppClientsPost = (
  clientCreateInput: ClientCreateInput,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<unknown>(
    {
      url: `/bff/sellers-app/clients`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: clientCreateInput,
      signal,
    },
    options,
  );
};

export const getCreateClientBffSellersAppClientsPostMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createClientBffSellersAppClientsPost>>,
    TError,
    { data: ClientCreateInput },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createClientBffSellersAppClientsPost>>,
  TError,
  { data: ClientCreateInput },
  TContext
> => {
  const mutationKey = ["createClientBffSellersAppClientsPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createClientBffSellersAppClientsPost>>,
    { data: ClientCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return createClientBffSellersAppClientsPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateClientBffSellersAppClientsPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createClientBffSellersAppClientsPost>>
>;
export type CreateClientBffSellersAppClientsPostMutationBody =
  ClientCreateInput;
export type CreateClientBffSellersAppClientsPostMutationError =
  void | HTTPValidationError;

/**
 * @summary Create Client
 */
export const useCreateClientBffSellersAppClientsPost = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createClientBffSellersAppClientsPost>>,
      TError,
      { data: ClientCreateInput },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createClientBffSellersAppClientsPost>>,
  TError,
  { data: ClientCreateInput },
  TContext
> => {
  const mutationOptions =
    getCreateClientBffSellersAppClientsPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * List clients, optionally filtered by assigned seller.

Requires mobile seller authentication (seller_users group).

Args:
    vendedor_asignado_id: Optional seller ID to filter clients
    client_port: Client port for service communication
    user: Authenticated seller user

Returns:
    List of clients

Raises:
    HTTPException: If listing clients fails
 * @summary List Clients
 */
export const listClientsBffSellersAppClientsGet = (
  params?: ListClientsBffSellersAppClientsGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<ClientListResponse>(
    { url: `/bff/sellers-app/clients`, method: "GET", params, signal },
    options,
  );
};

export const getListClientsBffSellersAppClientsGetQueryKey = (
  params?: ListClientsBffSellersAppClientsGetParams,
) => {
  return [`/bff/sellers-app/clients`, ...(params ? [params] : [])] as const;
};

export const getListClientsBffSellersAppClientsGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListClientsBffSellersAppClientsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getListClientsBffSellersAppClientsGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>
  > = ({ signal }) =>
    listClientsBffSellersAppClientsGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListClientsBffSellersAppClientsGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>
>;
export type ListClientsBffSellersAppClientsGetQueryError =
  void | HTTPValidationError;

export function useListClientsBffSellersAppClientsGet<
  TData = Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
  TError = void | HTTPValidationError,
>(
  params: undefined | ListClientsBffSellersAppClientsGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
          TError,
          Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListClientsBffSellersAppClientsGet<
  TData = Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListClientsBffSellersAppClientsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
          TError,
          Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListClientsBffSellersAppClientsGet<
  TData = Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListClientsBffSellersAppClientsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Clients
 */

export function useListClientsBffSellersAppClientsGet<
  TData = Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListClientsBffSellersAppClientsGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listClientsBffSellersAppClientsGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListClientsBffSellersAppClientsGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
