/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * BFF Service
 * Backend For Frontend service aggregating microservices
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type { ClientListResponse, OrderCreateResponse } from ".././models";

export const getCreateOrderBffSellersAppOrdersPostResponseMock = (
  overrideResponse: Partial<OrderCreateResponse> = {},
): OrderCreateResponse => ({
  id: faker.string.uuid(),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getListClientsBffSellersAppClientsGetResponseMock = (
  overrideResponse: Partial<ClientListResponse> = {},
): ClientListResponse => ({
  clients: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    cliente_id: faker.string.uuid(),
    cognito_user_id: faker.string.alpha({ length: { min: 10, max: 20 } }),
    email: faker.string.alpha({ length: { min: 10, max: 20 } }),
    telefono: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nombre_institucion: faker.string.alpha({ length: { min: 10, max: 20 } }),
    tipo_institucion: faker.string.alpha({ length: { min: 10, max: 20 } }),
    nit: faker.string.alpha({ length: { min: 10, max: 20 } }),
    direccion: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ciudad: faker.string.alpha({ length: { min: 10, max: 20 } }),
    pais: faker.string.alpha({ length: { min: 10, max: 20 } }),
    representante: faker.string.alpha({ length: { min: 10, max: 20 } }),
    vendedor_asignado_id: faker.helpers.arrayElement([
      faker.string.uuid(),
      null,
    ]),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
  })),
  total: faker.number.int({ min: undefined, max: undefined }),
  ...overrideResponse,
});

export const getCreateOrderBffSellersAppOrdersPostMockHandler = (
  overrideResponse?:
    | OrderCreateResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<OrderCreateResponse> | OrderCreateResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/bff/sellers-app/orders",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateOrderBffSellersAppOrdersPostResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getCreateClientBffSellersAppClientsPostMockHandler = (
  overrideResponse?:
    | unknown
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<unknown> | unknown),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/bff/sellers-app/clients",
    async (info) => {
      await delay(1000);
      if (typeof overrideResponse === "function") {
        await overrideResponse(info);
      }
      return new HttpResponse(null, { status: 201 });
    },
    options,
  );
};

export const getListClientsBffSellersAppClientsGetMockHandler = (
  overrideResponse?:
    | ClientListResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<ClientListResponse> | ClientListResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/bff/sellers-app/clients",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListClientsBffSellersAppClientsGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getSellersAppMock = () => [
  getCreateOrderBffSellersAppOrdersPostMockHandler(),
  getCreateClientBffSellersAppClientsPostMockHandler(),
  getListClientsBffSellersAppClientsGetMockHandler(),
];
