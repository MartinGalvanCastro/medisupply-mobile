/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * BFF Service
 * Backend For Frontend service aggregating microservices
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import type {
  ClientAppSchemasOrderSchemasOrderCreateInput,
  HTTPValidationError,
  ListMyOrdersBffClientAppMyOrdersGetParams,
  OrderCreateResponse,
  PaginatedOrdersResponse,
} from ".././models";

import { customInstance } from "../../client";

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Create a new order via client app.

This endpoint:
1. Accepts customer_id and items (producto_id, cantidad)
2. Forwards request to Order Service with metodo_creacion='app_cliente'
3. No seller_id or visit_id required (client app orders)

Args:
    order_input: Order creation input
    order_port: Order port for service communication

Returns:
    OrderCreateResponse with order ID and message

Raises:
    HTTPException: If order creation fails
 * @summary Create Order
 */
export const createOrderBffClientAppOrdersPost = (
  clientAppSchemasOrderSchemasOrderCreateInput: ClientAppSchemasOrderSchemasOrderCreateInput,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<OrderCreateResponse>(
    {
      url: `/bff/client-app/orders`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: clientAppSchemasOrderSchemasOrderCreateInput,
      signal,
    },
    options,
  );
};

export const getCreateOrderBffClientAppOrdersPostMutationOptions = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createOrderBffClientAppOrdersPost>>,
    TError,
    { data: ClientAppSchemasOrderSchemasOrderCreateInput },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createOrderBffClientAppOrdersPost>>,
  TError,
  { data: ClientAppSchemasOrderSchemasOrderCreateInput },
  TContext
> => {
  const mutationKey = ["createOrderBffClientAppOrdersPost"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createOrderBffClientAppOrdersPost>>,
    { data: ClientAppSchemasOrderSchemasOrderCreateInput }
  > = (props) => {
    const { data } = props ?? {};

    return createOrderBffClientAppOrdersPost(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateOrderBffClientAppOrdersPostMutationResult = NonNullable<
  Awaited<ReturnType<typeof createOrderBffClientAppOrdersPost>>
>;
export type CreateOrderBffClientAppOrdersPostMutationBody =
  ClientAppSchemasOrderSchemasOrderCreateInput;
export type CreateOrderBffClientAppOrdersPostMutationError =
  void | HTTPValidationError;

/**
 * @summary Create Order
 */
export const useCreateOrderBffClientAppOrdersPost = <
  TError = void | HTTPValidationError,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createOrderBffClientAppOrdersPost>>,
      TError,
      { data: ClientAppSchemasOrderSchemasOrderCreateInput },
      TContext
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createOrderBffClientAppOrdersPost>>,
  TError,
  { data: ClientAppSchemasOrderSchemasOrderCreateInput },
  TContext
> => {
  const mutationOptions =
    getCreateOrderBffClientAppOrdersPostMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * List orders for the authenticated client user.

This endpoint:
1. Gets the Cognito User ID from the authenticated user (JWT sub claim)
2. Looks up the client record using cognito_user_id
3. Fetches orders for that client (customer_id = cliente_id)

Requires client_users group authentication.

Args:
    limit: Maximum number of orders to return (1-100)
    offset: Number of orders to skip
    order_port: Order port for service communication
    client_port: Client port for service communication
    user: Authenticated client user

Returns:
    PaginatedOrdersResponse with user's orders

Raises:
    HTTPException: If client not found or order fetching fails
 * @summary List My Orders
 */
export const listMyOrdersBffClientAppMyOrdersGet = (
  params?: ListMyOrdersBffClientAppMyOrdersGetParams,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PaginatedOrdersResponse>(
    { url: `/bff/client-app/my-orders`, method: "GET", params, signal },
    options,
  );
};

export const getListMyOrdersBffClientAppMyOrdersGetQueryKey = (
  params?: ListMyOrdersBffClientAppMyOrdersGetParams,
) => {
  return [`/bff/client-app/my-orders`, ...(params ? [params] : [])] as const;
};

export const getListMyOrdersBffClientAppMyOrdersGetQueryOptions = <
  TData = Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListMyOrdersBffClientAppMyOrdersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getListMyOrdersBffClientAppMyOrdersGetQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>
  > = ({ signal }) =>
    listMyOrdersBffClientAppMyOrdersGet(params, requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListMyOrdersBffClientAppMyOrdersGetQueryResult = NonNullable<
  Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>
>;
export type ListMyOrdersBffClientAppMyOrdersGetQueryError =
  void | HTTPValidationError;

export function useListMyOrdersBffClientAppMyOrdersGet<
  TData = Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
  TError = void | HTTPValidationError,
>(
  params: undefined | ListMyOrdersBffClientAppMyOrdersGetParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
          TError,
          Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMyOrdersBffClientAppMyOrdersGet<
  TData = Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListMyOrdersBffClientAppMyOrdersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
          TError,
          Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>
        >,
        "initialData"
      >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListMyOrdersBffClientAppMyOrdersGet<
  TData = Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListMyOrdersBffClientAppMyOrdersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List My Orders
 */

export function useListMyOrdersBffClientAppMyOrdersGet<
  TData = Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
  TError = void | HTTPValidationError,
>(
  params?: ListMyOrdersBffClientAppMyOrdersGetParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof listMyOrdersBffClientAppMyOrdersGet>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customInstance>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListMyOrdersBffClientAppMyOrdersGetQueryOptions(
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
