/**
 * Generated by orval v7.15.0 üç∫
 * Do not edit manually.
 * BFF Service
 * Backend For Frontend service aggregating microservices
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";

import { HttpResponse, delay, http } from "msw";
import type { RequestHandlerOptions } from "msw";

import type { OrderCreateResponse, PaginatedOrdersResponse } from ".././models";

export const getCreateOrderBffClientAppOrdersPostResponseMock = (
  overrideResponse: Partial<OrderCreateResponse> = {},
): OrderCreateResponse => ({
  id: faker.string.uuid(),
  message: faker.string.alpha({ length: { min: 10, max: 20 } }),
  ...overrideResponse,
});

export const getListMyOrdersBffClientAppMyOrdersGetResponseMock = (
  overrideResponse: Partial<PaginatedOrdersResponse> = {},
): PaginatedOrdersResponse => ({
  items: Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.uuid(),
    customer_id: faker.string.uuid(),
    seller_id: faker.helpers.arrayElement([faker.string.uuid(), null]),
    visit_id: faker.helpers.arrayElement([faker.string.uuid(), null]),
    route_id: faker.helpers.arrayElement([faker.string.uuid(), null]),
    fecha_pedido: `${faker.date.past().toISOString().split(".")[0]}Z`,
    fecha_entrega_estimada: faker.helpers.arrayElement([
      faker.date.past().toISOString().split("T")[0],
      null,
    ]),
    metodo_creacion: faker.string.alpha({ length: { min: 10, max: 20 } }),
    direccion_entrega: faker.string.alpha({ length: { min: 10, max: 20 } }),
    ciudad_entrega: faker.string.alpha({ length: { min: 10, max: 20 } }),
    pais_entrega: faker.string.alpha({ length: { min: 10, max: 20 } }),
    customer_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
    customer_phone: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    customer_email: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    seller_name: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    seller_email: faker.helpers.arrayElement([
      faker.string.alpha({ length: { min: 10, max: 20 } }),
      null,
    ]),
    monto_total: faker.number.float({
      min: undefined,
      max: undefined,
      fractionDigits: 2,
    }),
    created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    items: Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.string.uuid(),
      pedido_id: faker.string.uuid(),
      producto_id: faker.string.uuid(),
      inventario_id: faker.string.uuid(),
      cantidad: faker.number.int({ min: undefined, max: undefined }),
      precio_unitario: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      precio_total: faker.number.float({
        min: undefined,
        max: undefined,
        fractionDigits: 2,
      }),
      product_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      product_sku: faker.string.alpha({ length: { min: 10, max: 20 } }),
      warehouse_id: faker.string.uuid(),
      warehouse_name: faker.string.alpha({ length: { min: 10, max: 20 } }),
      warehouse_city: faker.string.alpha({ length: { min: 10, max: 20 } }),
      warehouse_country: faker.string.alpha({ length: { min: 10, max: 20 } }),
      batch_number: faker.string.alpha({ length: { min: 10, max: 20 } }),
      expiration_date: faker.date.past().toISOString().split("T")[0],
      created_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
      updated_at: `${faker.date.past().toISOString().split(".")[0]}Z`,
    })),
  })),
  total: faker.number.int({ min: undefined, max: undefined }),
  page: faker.number.int({ min: undefined, max: undefined }),
  size: faker.number.int({ min: undefined, max: undefined }),
  has_next: faker.datatype.boolean(),
  has_previous: faker.datatype.boolean(),
  ...overrideResponse,
});

export const getCreateOrderBffClientAppOrdersPostMockHandler = (
  overrideResponse?:
    | OrderCreateResponse
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<OrderCreateResponse> | OrderCreateResponse),
  options?: RequestHandlerOptions,
) => {
  return http.post(
    "*/bff/client-app/orders",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getCreateOrderBffClientAppOrdersPostResponseMock(),
        ),
        { status: 201, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};

export const getListMyOrdersBffClientAppMyOrdersGetMockHandler = (
  overrideResponse?:
    | PaginatedOrdersResponse
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<PaginatedOrdersResponse> | PaginatedOrdersResponse),
  options?: RequestHandlerOptions,
) => {
  return http.get(
    "*/bff/client-app/my-orders",
    async (info) => {
      await delay(1000);

      return new HttpResponse(
        JSON.stringify(
          overrideResponse !== undefined
            ? typeof overrideResponse === "function"
              ? await overrideResponse(info)
              : overrideResponse
            : getListMyOrdersBffClientAppMyOrdersGetResponseMock(),
        ),
        { status: 200, headers: { "Content-Type": "application/json" } },
      );
    },
    options,
  );
};
export const getClientAppMock = () => [
  getCreateOrderBffClientAppOrdersPostMockHandler(),
  getListMyOrdersBffClientAppMyOrdersGetMockHandler(),
];
